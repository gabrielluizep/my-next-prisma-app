import type { NextPage } from 'next'

import Head from 'next/head'
import { useState } from 'react'

import { Prisma, Role } from '@prisma/client'

import { Button, Container, Divider, Form, Header, Icon, Image, Table } from 'semantic-ui-react'
import pkg from 'semantic-ui-react/package.json'

import prisma from '../lib/prisma'

import { fetcher } from '../utils/fetcher'

export async function getServerSideProps() {
  const users: Prisma.UserUncheckedCreateInput[] = await prisma.user.findMany()

  return {
    props: {
      initialUsers: users,
    },
  }
}

const options = [
  {
    key: 'admin',
    text: 'Admin',
    value: 'ADMIN',
  },
  {
    key: 'user',
    text: 'User',
    value: 'USER',
  },
  {
    key: 'developer',
    text: 'Developer',
    value: 'DEVELOPER',
  },
]

const capitalize = (s: String) => s.charAt(0).toUpperCase() + s.slice(1).toLocaleLowerCase()

type Props = {
  initialUsers: Prisma.UserUncheckedCreateInput[]
}

const Home: NextPage<Props> = ({ initialUsers }) => {
  const [users, setUsers] = useState<Prisma.UserUncheckedCreateInput[]>(initialUsers)

  const [firstName, setFirstName] = useState('')
  const [lastName, setLastName] = useState('')
  const [email, setEmail] = useState('')
  const [avatar, setAvatar] = useState('')
  const [role, setRole] = useState<Role | undefined>()

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css" />
      </Head>
      <Container style={{ marginTop: '20px' }}>
        <Header as="h3">This app is powered by NextJS, Semantic UI {pkg.version}</Header>
        <Form
          onSubmit={async ({}) => {
            const body: Prisma.UserCreateInput = {
              firstName,
              lastName,
              role,
              email,
              avatar,
            }

            await fetcher('/api/create', { user: body })
            await setUsers([...users, body])

            setFirstName('')
            setLastName('')
            setEmail('')
            setAvatar('')
            setRole(undefined)
          }}
        >
          <Form.Group widths="equal">
            <Form.Input
              fluid
              label="First Name"
              placeholder="First Name"
              value={firstName}
              onChange={(e, { value }) => setFirstName(value)}
            />

            <Form.Input
              fluid
              label="Last Name"
              placeholder="Last Name"
              value={lastName}
              onChange={(e, { value }) => setLastName(value)}
            />

            <Form.Input
              fluid
              label="Email"
              placeholder="Email"
              value={email}
              onChange={(e, { value }) => setEmail(value)}
            />

            <Form.Input
              fluid
              label="Avatar"
              placeholder="Avatar"
              value={avatar}
              onChange={(e, { value }) => setAvatar(value)}
            />

            <Form.Select
              fluid
              label="Role"
              placeholder="Role"
              value={role}
              onChange={(e, { value }) => setRole(value as Role)}
              options={options}
            />
          </Form.Group>
          <Form.Button content="Submit" />
        </Form>

        <Divider horizontal>Users</Divider>

        <Table basic="very" celled collapsing>
          <Table.Header>
            <Table.Row>
              <Table.HeaderCell>User</Table.HeaderCell>
              <Table.HeaderCell>Email</Table.HeaderCell>
              <Table.HeaderCell>Action</Table.HeaderCell>
            </Table.Row>
          </Table.Header>

          <Table.Body>
            {users.map((user) => (
              <Table.Row key={user.id}>
                <Table.Cell>
                  <Header as="h4">
                    <Image src={user.avatar} avatar alt="avatar" />
                    <Header.Content>
                      {user.firstName} {user.lastName}
                      <Header.Subheader>{capitalize(user.role || '')}</Header.Subheader>
                    </Header.Content>
                  </Header>
                </Table.Cell>
                <Table.Cell>{user.email}</Table.Cell>
                <Table.Cell>
                  <Button
                    animated="fade"
                    color="red"
                    onClick={async () => {
                      await fetcher('/api/delete', { id: user.id })
                      await setUsers(users.filter((u) => u.id !== user.id))
                    }}
                  >
                    <Button.Content visible>Delete</Button.Content>
                    <Button.Content hidden>
                      <Icon name="user delete" />
                    </Button.Content>
                  </Button>
                </Table.Cell>
              </Table.Row>
            ))}
          </Table.Body>
        </Table>
      </Container>
    </>
  )
}

export default Home
